---
- name: ensure firewalld is running and enabled on boot
  service:
    name: firewalld
    state: started
    enabled: yes
  when: not firewalld_disable

- name: ensure firewalld is stopped and disabled on boot
  service:
    name: firewalld
    state: stopped
    enabled: no
  when: firewalld_disable

- name: add firewalld zones
  when: not firewalld_disable
  block:

  - name: create firewalld zones
    firewalld:
      zone: "{{ zone.name }}"
      state: present
      permanent: yes
    register: firewalld_register_zones_created
    loop: "{{ firewalld_zones | default([]) }}"
    loop_control:
      loop_var: zone

  always:
  - when: firewalld_register_zones_created.changed
    # see 'zone' notes: https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.html
    name: reload firewalld immediate
    systemd:
      name: firewalld
      state: reloaded

- name: activate firewalld zones by source
  when: not firewalld_disable
  block:

  - name: activate firewalld zones
    include_tasks: cfg_firewalld_zone.yml
    loop: "{{ firewalld_zones | default([]) }}"
    loop_control:
      loop_var: zone

- name: add firewalld rules for services from vars
  firewalld:
    service: '{{ item.service }}'
    zone: '{{ item.zone | default ("public") }}'
    permanent: '{{ item.permanent | default (True) }}'
    state: '{{ item.state | default ("enabled") }}'
  loop: '{{ firewalld_allow_services }}'
  notify: firewalld reload firewalld
  when: not firewalld_disable

- name: add firewalld rules for ports from vars
  firewalld:
    port: '{{ item.port }}'
    zone: '{{ item.zone | default ("public") }}'
    permanent: '{{ item.permanent | default (True) }}'
    state: '{{ item.state | default ("enabled") }}'
  loop: '{{ firewalld_allow_ports }}'
  notify: firewalld reload firewalld
  when: not firewalld_disable

- name: add firewalld rich rules
  firewalld:
    rich_rule: '{{ item.rich_rule }}'
    zone: '{{ item.zone | default ("public") }}'
    permanent: '{{ item.permanent | default (True) }}'
    state: '{{ item.state | default ("enabled") }}'
  loop: '{{ firewalld_rich_rules }}'
  notify: firewalld reload firewalld
  when: not firewalld_disable
